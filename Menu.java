/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DragNDrop;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author NguyenQuocKhanh
 */
public class Menu extends javax.swing.JFrame {
    
    private static final int FILE_OPEN= 1;
    private static final int FILE_SAVE= 2;
    private boolean changed= false;
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        taFile = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        jmFormat = new javax.swing.JMenu();
        miWordWrap = new javax.swing.JCheckBoxMenuItem();
        miLineWrap = new javax.swing.JCheckBoxMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setLocation(new java.awt.Point(400, 200));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        taFile.setColumns(20);
        taFile.setLineWrap(true);
        taFile.setRows(5);
        taFile.setWrapStyleWord(true);
        taFile.setDragEnabled(true);
        taFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                taFileKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(taFile);

        jmFile.setMnemonic('F');
        jmFile.setText("File");

        miNew.setMnemonic('N');
        miNew.setText("New");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        jmFile.add(miNew);

        miOpen.setMnemonic('O');
        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jmFile.add(miOpen);

        miSave.setMnemonic('S');
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        jmFile.add(miSave);
        jmFile.add(jSeparator2);

        miExit.setMnemonic('X');
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jmFile.add(miExit);

        jMenuBar2.add(jmFile);

        jmEdit.setMnemonic('E');
        jmEdit.setText("Edit");
        jMenuBar2.add(jmEdit);

        jmFormat.setMnemonic('M');
        jmFormat.setText("Format");

        miWordWrap.setMnemonic('W');
        miWordWrap.setSelected(true);
        miWordWrap.setText("Word Wrap");
        miWordWrap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                miWordWrapStateChanged(evt);
            }
        });
        jmFormat.add(miWordWrap);

        miLineWrap.setMnemonic('L');
        miLineWrap.setSelected(true);
        miLineWrap.setText("Line Wrap");
        miLineWrap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miLineWrapItemStateChanged(evt);
            }
        });
        jmFormat.add(miLineWrap);

        jMenuBar2.add(jmFormat);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {                                      
        if (taFile.getText().equals("")) changed= false;
        if (changed){
            int k= JOptionPane.showConfirmDialog(null, "Do you want to save this file", "", JOptionPane.YES_NO_OPTION);
            if (k== JOptionPane.YES_OPTION) operateFile("Save", FILE_SAVE);
        }
        this.setTitle("");
        taFile.setText("");
        taFile.requestFocus();
        changed= false;
    }                                     

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {                                       
        operateFile("Open file", FILE_OPEN);
    }                                      

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {                                       
        operateFile("Save", FILE_SAVE);
    }                                      
    
    private void operateFile(String title, int type){
        JFileChooser chooser= new JFileChooser();
        chooser.setDialogTitle(title);
        int choose= -1;
        switch(type){
            case FILE_OPEN:
                choose= chooser.showOpenDialog(null);
                break;
            case FILE_SAVE:
                choose= chooser.showSaveDialog(null);
                break;
        }
        File file= chooser.getSelectedFile();
        if (choose== JFileChooser.APPROVE_OPTION){
           switch(type){
            case FILE_OPEN:
                readFile(file);
                this.setTitle(file.getName());
                break;
            case FILE_SAVE:
                writeFile(file);
                this.setTitle(file.getName());
                break;
            } 
        }
    }
    
    private void readFile(File file){
        if (changed){
            int k= JOptionPane.showConfirmDialog(null, "Do you want to save this file", "", JOptionPane.YES_NO_OPTION);
            if (k== JOptionPane.YES_OPTION) operateFile("Save", FILE_SAVE);
        }
        BufferedReader br= null;
        try {
            taFile.setText("");
            br = new BufferedReader(new FileReader(file));
            String line;
            while ((line= br.readLine())!= null)
                taFile.append(line+ "\n");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        changed= false;
    }
    
    private void writeFile(File file){
        BufferedWriter bw= null;
        try {
            file.createNewFile();
            bw = new BufferedWriter(new FileWriter(file));
            String data= taFile.getText();
            bw.write(data);
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {                                       
        if (changed){
            int k= JOptionPane.showConfirmDialog(null, "Do you want to save this file", "", JOptionPane.YES_NO_OPTION);
            if (k== JOptionPane.YES_OPTION) operateFile("Save", FILE_SAVE);
            System.exit(0);
        } else{
            int k= JOptionPane.showConfirmDialog(null, "Do you want to Exit", "Exit", JOptionPane.YES_NO_OPTION);
            if (k== JOptionPane.YES_OPTION) System.exit(0);
        }
    }                                      

    private void taFileKeyTyped(java.awt.event.KeyEvent evt) {                                
        changed= true;
    }                               

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        if (changed){
            int k= JOptionPane.showConfirmDialog(null, "Do you want to save this file", "", JOptionPane.YES_NO_OPTION);
            if (k== JOptionPane.YES_OPTION) operateFile("Save", FILE_SAVE);
            System.exit(0);
        } else{
            int k= JOptionPane.showConfirmDialog(null, "Do you want to Exit", "Exit", JOptionPane.YES_NO_OPTION);
            if (k== JOptionPane.YES_OPTION) System.exit(0);
        }
    }                                  
    
    private void miWordWrapStateChanged(javax.swing.event.ChangeEvent evt) {                                        
        taFile.setWrapStyleWord(miWordWrap.isSelected());
        taFile.setText(taFile.getText());
    }                                       

    private void miLineWrapItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        taFile.setLineWrap(miLineWrap.isSelected());
        taFile.setText(taFile.getText());
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmFormat;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JCheckBoxMenuItem miLineWrap;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JCheckBoxMenuItem miWordWrap;
    private javax.swing.JTextArea taFile;
    // End of variables declaration                   
}



if(Integer.valueOf(quantity)> new ItemsController().GetQuantity(id)) {
			str += "Please enter the quantity is smaller than the real quantity of Item";
		}
		